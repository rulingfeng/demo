server:
  port: 8886

spring:

  redis:
#    host: 120.26.81.182
    host: 10.11.2.58
    port: 6379

#单库多表策略，根据时间分， 每月一张表
  shardingsphere:
    enabled: true
    props:
      sql-show: true
    datasource:
      #自定义m1数据库
      names: m1
      m1:
        type: ${spring.datasource.type}
        driver-class-name: ${spring.datasource.druid.driver-class-name}
        url: ${spring.datasource.druid.url}
        username: ${spring.datasource.druid.username}
        password: ${spring.datasource.druid.password}
    rules:
      sharding:
        tables:
          #自定义分表的表名，应该支持多个
          order_main: # 表名
            actual-data-nodes: m1.order_main,m1.order_main_$->{2022..2035}$->{(1..12).collect(i->i.toString().padLeft(2,'0'))}
            table-strategy: # ??????
              standard: # ?????????????
                sharding-column: dynamic_time # 分表的策略字段（根据时间戳按照月分）
                sharding-algorithm-name: order-main-inline # 分表算法，表名+inline？
        # ??????
        sharding-algorithms:
          order-main-inline: # 和上2行的名字对应，应该也可以多个
            type: CLASS_BASED #?????
            props:
              strategy: standard
              # ??+??
              algorithmClassName: com.example.demo.config.shard.DateShardingAlgorithm
              #type: INTERVAL  # ?????? ????????
              #props:
              #datetime-pattern: yyyy-MM-dd HH:mm:ss  #?????????
              #datetime-lower: 2022-01-01 00:00:00 #????????
              #datetime-upper: 2024-01-01 00:00:00 #???????
              #sharding-suffix-pattern: yyyyMM #??????????????
              #datetime-interval-amount: 1 #??????????????????????
              #datetime-interval-unit: MONTHS #?????????

        #要分表的表名 应该要和        tables配置下的表名要一致
        binding-tables: order_main
        # 默认id的生成策略
        default-key-generate-strategy:
          column: id # ?????
          key-generator-name: id-key  # ?????????
        key-generators:
          id-key:
            type: SNOWFLAKE # 雪花算法
  autoconfigure: # ??druid ????
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://121.43.183.45:3306/order?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
      username: root
      password: shmliy

  #elasticsearch相关
  data:
    elasticsearch:
      cluster-name: 121.43.183.45:9200
      repositories:
        enable: true
management:
  health:
    elasticsearch:
      enabled: false

gzhInfo:
  info:
    appId: wx708aac93e62dc9f7
    appSecret: b6242314c7583619ea0ce11aab7ee5a3
    token: sps123
  templateId:
    carIn: hmn1ctYAYBMK-EkSJMkPmEnclwpQoPdbt6jPbGhJwh4
    pay: fEsdADdL0gcJUY6nMbTYuuhvHTRRBAMJGcU8rKIebaE
    carInError: hmn1ctYAYBMK-EkSJMkPmEnclwpQoPdbt6jPbGhJwh4

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

logging:
  level:
    #root: info #日志配置DEBUG,INFO,WARN,ERROR
    com.example.demo.dao: debug

payment:
  config: http://192.168.0.113:9999
  appId: wx708aac93e62dc9f7
  appSecret: b6242314c7583619ea0ce11aab7ee5a3

performance:
  loopThreads: 20
  workThreads: 200

jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: linkedhashmap
      keyConvertor: fastjson
  remote:
    default:
      type: redis
      keyConvertor: fastjson
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
      host: localhost
      port: 6379


